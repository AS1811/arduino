#include <Colorduino.h>
#include "Vector3.h"

Colorduino matrix = Colorduino(31,63,55);

ISR(TIMER2_OVF_vect) {
	cli();
	TCNT2 = 0x64;
	matrix.run();
	sei();
}

bool corners[8][3] = {
	{0,0,0}, {1,0,0},
	{0,1,0}, {1,1,0},
	{0,0,1}, {1,0,1},
	{0,1,1}, {1,1,1},
};

unsigned char permutations[] = {47, 233, 207, 135, 183, 217, 107, 37, 130, 23, 138, 101, 94, 93, 204, 10, 34, 234, 172, 223, 36, 49, 143, 159, 62, 164, 29, 30, 99, 22, 200, 6, 141, 160, 206, 252, 67, 151, 42, 184, 181, 220, 14, 214, 182, 228, 8, 110, 65, 163, 216, 187, 116, 27, 169, 78, 105, 211, 132, 119, 174, 80, 1, 26, 137, 175, 15, 165, 52, 178, 32, 56, 11, 191, 242, 35, 202, 199, 236, 92, 55, 208, 161, 16, 97, 5, 131, 60, 18, 54, 162, 114, 77, 96, 76, 142, 7, 247, 173, 24, 58, 28, 103, 129, 12, 140, 38, 177, 57, 250, 196, 50, 75, 63, 251, 246, 20, 81, 139, 104, 136, 46, 53, 222, 212, 9, 215, 88, 124, 64, 123, 120, 84, 237, 70, 72, 171, 79, 240, 106, 59, 21, 121, 192, 150, 152, 224, 218, 71, 98, 33, 0, 146, 149, 100, 227, 241, 95, 219, 179, 185, 3, 225, 244, 61, 166, 117, 231, 201, 157, 127, 74, 167, 40, 153, 243, 126, 245, 186, 115, 91, 226, 205, 148, 239, 145, 195, 193, 154, 2, 189, 133, 125, 213, 85, 108, 118, 176, 19, 83, 82, 17, 156, 238, 102, 249, 45, 229, 209, 122, 235, 232, 170, 147, 253, 43, 68, 25, 128, 230, 66, 41, 188, 31, 111, 248, 210, 113, 194, 44, 221, 155, 203, 90, 86, 254, 168, 51, 48, 180, 73, 89, 198, 109, 13, 69, 112, 134, 158, 197, 87, 4, 255, 39, 144, 190};
float gradients[] = {-0.6428739535622299, 0.7062221770174801, -0.5478284787386656, -0.41586461290717125, -0.13622034108266234, -0.3735345443710685, -0.4247232833877206, 0.4734082529321313, -0.0024386346340179443, -0.5133578768000007, -0.8898024270310998, 0.5228118160739541, 0.1994439084082842, -0.6264953073114157, -0.0334317609667778, 0.6099163196049631, -0.7804916077293456, 0.93594233924523, -0.19597565988078713, -0.9860729756765068, 0.11747355898842216, 0.1352160037495196, 0.9938585022464395, 0.7535546491853893, 0.12315242644399405, -0.3543673208914697, -0.010198935400694609, 0.17105530109256506, -0.7815082352608442, -0.00707221869379282, -0.5103268106468022, 0.9219935918226838, 0.6161270588636398, -0.8451033444143832, -0.29957277048379183, -0.2784529230557382, 0.8812211123295128, -0.47598478058353066, 0.720341291744262, 0.66555714327842, 0.48788407491520047, -0.1187239452265203, 0.15589847974479198, -0.8474071002565324, 0.027349169831722975, -0.5598352416418493, 0.09997643763199449, -0.1144933570176363, -0.021056673489511013, 0.8306653397157788, -0.8446417893283069, -0.15393689088523388, 0.21067854389548302, -0.4371803505346179, 0.8854621262289584, 0.43505496345460415, 0.7937385160475969, 0.06224248558282852, 0.1255808975547552, -0.5411307904869318, -0.7317258077673614, 0.8513216213323176, -0.40000177221372724, 0.13954621087759733, -0.5220425557345152, 0.9655492505989969, 0.6548898094333708, 0.7737727342173457, -0.5298264655284584, 0.05751000205054879, 0.4847269165329635, -0.8412880930118263, -0.3514783629216254, 0.4186536520719528, -0.820312334690243, 0.26759356958791614, 0.2263904381543398, -0.8523025340400636, 0.6839851657859981, -0.8525680648162961, 0.6291739596053958, 0.030354872345924377, 0.7801813543774188, 0.4932743743993342, -0.6378287267871201, -0.5118373814038932, 0.536602477543056, -0.383597475476563, -0.07311499072238803, -0.4038119614124298, 0.2669646870344877, 0.35306190932169557, 0.36137714283540845, -0.7709371619857848, 0.10742649622261524, 0.7290878938511014, 0.8730948651209474, -0.8081581126898527, -0.7771165734156966, -0.2576582650654018, 0.645534391514957, -0.625770712736994, 0.21975505724549294, 0.9131042971275747, -0.4799282834865153, 0.37444111751392484, 0.924760424066335, -0.8094401792623103, -0.8810766553506255, -0.07254111859947443, 0.6104573104530573, -0.8931241687387228, 0.518979293294251, -0.949748741928488, -0.08236971078440547, 0.331726286560297, -0.6470915982499719, 0.6152931023389101, 0.7761571486480534, 0.48917132150381804, -0.6667633699253201, 0.09176725801080465, 0.26671613985672593, 0.9148421809077263, -0.4933320661075413, 0.5434557194821537, 0.5345487776212394, 0.12997844209894538, 0.6371889882721007, -0.01028929091989994, -0.528397073969245, -0.6487062843516469, -0.9009747859090567, 0.4342489982955158, 0.12392868380993605, -0.22329322947189212, -0.44667302444577217, -0.5728226602077484, -0.9842670490033925, -0.5288086733780801, 0.8061083857901394, 0.6167709217406809, -0.8880371004343033, 0.4843776524066925, 0.9003319526091218, -0.47875813441351056, -0.2990226554684341, -0.27806224301457405, 0.13082107715308666, -0.5329931830056012, 0.4404966006986797, -0.6192512288689613, -0.22198966657742858, -0.3961258535273373, -0.22324505215510726, 0.05717429192736745, -0.5880482620559633, -0.2735029300674796, 0.4426752757281065, 0.34899452282115817, -0.17506410041823983, 0.09362402139231563, -0.7432997338473797, -0.4595711510628462, 0.4212886495515704, 0.5014266646467149, -0.345924727153033, 0.19368840754032135, -0.6823687697760761, 0.7725439281202853, 0.04611097602173686, -0.7365469415672123, 0.4885245207697153, 0.08556525176391006, 0.3621533284895122, -0.06779549829661846, 0.9742358545772731, 0.6870473115704954, -0.020781051367521286, 0.12122040754184127, 0.019210715778172016, -0.018103332724422216, -0.71319784456864, -0.04426696244627237, 0.15431785862892866, 0.4545170208439231, -0.8854874726384878, -0.391453939024359, 0.4453946906141937, -0.6590187051333487, -0.22972226236015558, 0.7866503125987947, 0.9208682584576309, 0.7630300689488649, -0.05062668677419424, 0.4358086297288537, -0.08361006760969758, -0.14549319352954626, -0.3634349275380373, -0.4034875142388046, 0.9260386489331722, -0.9081152654252946, 0.24433873780071735, 0.15901484992355108, 0.4127132473513484, -0.7221093736588955, 0.8245015530847013, -0.01205505058169365, -0.49265102157369256, -0.1437604851089418, -0.552140970248729, -0.25709127075970173, -0.2781670205295086, -0.645713877864182, -0.8787984526716173, -0.15506457537412643, 0.4528860365971923, -0.38770556496456265, -0.5424215323291719, 0.1704744603484869, 0.47470161644741893, 0.9788167583756149, 0.9519065492786467, 0.6413818844594061, 0.7561008334159851, -0.15690028062090278, -0.4107496803626418, -0.20303390827029943, -0.7840588195249438, -0.2566906213760376, -0.06932527851313353, 0.034593363758176565, -0.925653210375458, -0.6999085084535182, -0.3263327535241842, 0.2867535534314811, 0.706290754955262, -0.6156584876589477, -0.3454597066156566, -0.4983884119428694, 0.31963322637602687, 0.5478355567902327, 0.5048824907280505, -0.8782323421910405, 0.20335715683177114, 0.5012365174479783, 0.3868318940512836, -0.48784250672906637, -0.9001363604329526, -0.5126757840625942, 0.29178103571757674, 0.993215705268085, -0.6346741979941726, 0.18057073559612036, 0.14568580593913794, 0.9816686296835542};

void setup() {
	matrix.setup();
	Serial.begin(9600);
}

unsigned char offset[3] = {0,0,0};
float z = 253;
void loop() {
	Vector3 vectors[8] = {};
	for(unsigned char i = 0; i < 8; i++) {
		unsigned char corner[3] = {
			offset[0] + (corners[i][0] ? 1 : 0),
			offset[1] + (corners[i][1] ? 1 : 0),
			offset[2] + (corners[i][2] ? 1 : 0),
		};
		
		unsigned char j = permutations[ corner[0] + permutations[ corner[1] + permutations[ corner[2] ] ] ];
		
		vectors[i].x = gradients[(j * 3 + 0) & 255];
		vectors[i].y = gradients[(j * 3 + 1) & 255];
		vectors[i].z = gradients[(j * 3 + 2) & 255];
	}
	
	for(unsigned char row = 0; row < 8; row++) {
		for(unsigned char col = 0; col < 8; col++) {
			Vector3 current = { (float)row / 7, (float)col / 7, z };
			Vector3 eased = current.ease();
			
			float sum = 0;
			for(unsigned char i = 0; i < 8; i++) {
				Vector3 displacement = current.sub(corners[i]);
				float value = displacement.dot(vectors[i]);
				sum += value * eased.influence(corners[i]);
			}
			
			sum = (sum * 2.5 + 1) * 256 / 2;
			
			unsigned char   final;
			if(sum < 0) final = 0;
			else if(sum > 255) final = 255;
			else final = (unsigned char)sum;
			matrix.setPixel(col,row, final);
		}
	}
	
	delay(1);
	z += .05;
	while(z > 1) { z -= 1; offset[2] += 1; };
}
